local dist = _G.dist or 7
local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local footballs = {}
local predictionTime = 0.1
local gravity = Vector3.new(0, -0.50, 0)
local isMoving = false

-- Utility function for notifications
local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 2
    })
end

-- Locate all footballs in the game workspace
local function locateFootballs()
    footballs = {}
    local gameFolder = Workspace:FindFirstChild("game")
    if gameFolder then
        for _, v in pairs(gameFolder:GetDescendants()) do
            if v:IsA("BasePart") and v.BrickColor == BrickColor.new("Lily white") and v.CanCollide == true then
                table.insert(footballs, v)
            end
        end
    end
end

-- Predict the future position of a football
local function predictPosition(part)
    if not part then return Vector3.zero end
    local velocity = part.AssemblyLinearVelocity
    return part.Position + velocity * predictionTime + 0.5 * gravity * predictionTime^2
end

-- Move parts to the closest football
local function movePartsToFootball()
    if isMoving then return end
    isMoving = true

    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local leftBoot = character:FindFirstChild("LeftBoot")
        local rightBoot = character:FindFirstChild("RightBoot")
        local rightHand = character:FindFirstChild("RightHand")

        if humanoidRootPart and leftBoot and rightBoot and rightHand then
            local closestFootball, closestDistance = nil, math.huge

            for _, football in pairs(footballs) do
                if football and football.Parent then
                    local predictedPosition = predictPosition(football)
                    local mag = (predictedPosition - humanoidRootPart.Position).Magnitude
                    if mag < closestDistance and mag <= dist then
                        closestFootball, closestDistance = predictedPosition, mag
                    end
                end
            end

            if closestFootball then
                leftBoot.Position = closestFootball
                rightBoot.Position = closestFootball
                rightHand.Position = closestFootball
            end
        end
    end
    isMoving = false
end

-- Keybind to adjust distance
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if isProcessed then return end
    if input.KeyCode == Enum.KeyCode.P then
        dist = dist + 1
        sendNotification("Distance Adjusted", "Distance increased to " .. dist, 2)
    elseif input.KeyCode == Enum.KeyCode.L then
        dist = math.max(1, dist - 1) -- Ensure distance doesn't go below 1
        sendNotification("Distance Adjusted", "Distance decreased to " .. dist, 2)
    end
end)

-- Monitor and track footballs
Workspace.ChildAdded:Connect(function(child)
    if child:IsA("BasePart") and child.BrickColor == BrickColor.new("Lily white") then
        table.insert(footballs, child)
    end
end)

-- Spawn task for football tracking
task.spawn(function()
    while true do
        locateFootballs()
        wait(2) -- Reduced frequency to lower CPU usage
    end
end)

-- Continuously move to football
RunService.RenderStepped:Connect(function()
    movePartsToFootball()
end)

sendNotification("Script Loaded", "Football tracker is now active!", 3)
