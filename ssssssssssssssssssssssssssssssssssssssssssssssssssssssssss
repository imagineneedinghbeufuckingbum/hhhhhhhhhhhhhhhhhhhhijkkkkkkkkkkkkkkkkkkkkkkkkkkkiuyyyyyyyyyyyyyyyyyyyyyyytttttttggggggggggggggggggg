-- Set the default distance
dist = _G.dist or 10

-- Declare required services
local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Variables to hold footballs and other required data
local footballs = {}
local gravity = Vector3.new(0, -0.50, 0)
local predictionTime = 0.1

-- Function to locate footballs (called every 0.5 seconds)
local function locateFootballs()
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            footballs = {}
            local gameFolder = Workspace:FindFirstChild("game")
            if gameFolder then
                for _, v in pairs(gameFolder:GetDescendants()) do
                    if v:IsA("BasePart") and v.BrickColor == BrickColor.new("Lily white") then
                        table.insert(footballs, v)
                    end
                end
            end
        end
    end
end

-- Function to predict football position (called less frequently)
local function predictPosition(part)
    if not part then return part.Position end
    local velocity = part.AssemblyLinearVelocity
    local height = part.Position.Y
    if velocity.Magnitude > 100 and height > 9 then
        return part.Position - Vector3.new(250, 0, 0)
    else
        return part.Position + velocity * predictionTime + 0.1 * gravity * predictionTime^2
    end
end

-- Function to move parts to football's predicted position
local function movePartsToFootball()
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local leftBoot = character:FindFirstChild("LeftBoot")
        local rightBoot = character:FindFirstChild("RightBoot")
        local rightHand = character:FindFirstChild("RightHand")
        
        if humanoidRootPart and leftBoot and rightBoot and rightHand then
            local closestFootball, closestDistance = nil, math.huge
            for _, football in pairs(footballs) do
                if football and football.Parent then
                    local predictedPosition = predictPosition(football)
                    local mag = (predictedPosition - humanoidRootPart.Position).Magnitude
                    if mag < closestDistance and mag <= dist then
                        closestFootball, closestDistance = predictedPosition, mag
                    end
                end
            end
            if closestFootball then
                -- Move parts only when needed
                leftBoot.Position = closestFootball
                rightBoot.Position = closestFootball
                rightHand.Position = closestFootball
            end
        end
    end
end

-- Call locateFootballs once every 0.5 seconds
task.spawn(function()
    while true do
        locateFootballs()
        wait(0.5)  -- Reduced frequency to improve performance
    end
end)

-- Function to duplicate parts (with minimal updates)
local function duplicateParts()
    local character = player.Character
    if character then
        local leftBoot = character:FindFirstChild("LeftBoot")
        local rightBoot = character:FindFirstChild("RightBoot")
        local rightHand = character:FindFirstChild("RightHand")
        
        if leftBoot then
            local leftBootClone = leftBoot:Clone()
            leftBootClone.Name = "LeftBootFake"
            leftBootClone.Parent = character
            leftBootClone.CanCollide = false
            leftBootClone.Massless = true
            leftBootClone.Transparency = 0
        end
        
        if rightBoot then
            local rightBootClone = rightBoot:Clone()
            rightBootClone.Name = "RightBootFake"
            rightBootClone.Parent = character
            rightBootClone.CanCollide = false
            rightBootClone.Massless = true
            rightBootClone.Transparency = 0
        end
        
        if rightHand then
            local rightHandClone = rightHand:Clone()
            rightHandClone.Name = "RightHandFake"
            rightHandClone.Parent = character
            rightHandClone.CanCollide = false
            rightHandClone.Massless = true
            rightHandClone.Transparency = 0
        end
        
        -- Hide the original parts
        if leftBoot then leftBoot.Transparency = 1 end
        if rightBoot then rightBoot.Transparency = 1 end
        if rightHand then rightHand.Transparency = 1 end
    end
end

-- Call duplicateParts function
duplicateParts()

-- Call movePartsToFootball every RenderStepped but with reduced frequency
local moveDebounce = false
RunService.RenderStepped:Connect(function()
    if not moveDebounce then
        moveDebounce = true
        movePartsToFootball()
        wait(0.1)  -- Reduce frequency of this call to improve performance
        moveDebounce = false
    end
end)

-- Predefined bool values to create
local localPlayer = Players.LocalPlayer
local userId = localPlayer.UserId
local profilesFolder = ReplicatedStorage:WaitForChild("network"):WaitForChild("Profiles"):WaitForChild(tostring(userId)):WaitForChild("inventory"):WaitForChild("Celebrations")

local boolValuesToCreate = {
    "Right Here Right Now",
    "Tshbalala",
    "Archer Slide",
    "Point Up",
    "The Griddy",
    "Yoga",
    "Boxing",
    "Glorious",
    "Pray",
    "Backflip",
}

for _, name in pairs(boolValuesToCreate) do
    if not profilesFolder:FindFirstChild(name) then
        local boolValue = Instance.new("BoolValue")
        boolValue.Name = name
        boolValue.Value = true
        boolValue.Parent = profilesFolder
        boolValue:SetAttribute("key", "57F34E8F-7698-464A-B2DF-1452BF0073AC")
    end
end

-- Disable "crash" and "VectorToWorldSpace" functions once
for _, v in getgc() do
    if typeof(v) == "function" then
        local info = debug.getinfo(v)
        if info.name == "crash" or info.name == "VectorToWorldSpace" then
            hookfunction(v, function() end)
        end
    end
end
